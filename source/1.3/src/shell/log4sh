#/**
# <?xml version="1.0" encoding="UTF-8"?>
# <!-- $Id$ -->
# <s:shelldoc xmlns:s="http://www.forestent.com/2005/XSL/ShellDoc">
# <s:header>
# log4sh 1.3.2
#
# http://log4sh.sourceforge.net/
# 
# written by Kate Ward &lt;kate.ward@forestent.com>
# released under the LGPL
#
# this module implements something like the log4j module from the Apache group
#
# notes:
# *) the default appender is a ConsoleAppender called stdout with a level
#    of ERROR and SimpleLayout
# *) the appender levels are as follows (decreasing order of output):
#    TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# </s:header>
#*/

# (possibly) declare variables that might come in from outside
[ -z "${LOG4SH_CONFIGURATION}" ] && LOG4SH_CONFIGURATION=''

# treat unset variables as an error when substituting
set -u

#
# constants
#
__LOG4SH_VERSION=1.3.2

__LOG4SH_TRUE=0
__LOG4SH_FALSE=1

__LOG4SH_CONFIGURATION='log4sh.properties'

__LOG4SH_APPENDER_CONSOLE='ConsoleAppender'
__LOG4SH_APPENDER_DAILY_ROLLING_FILE='DailyRollingFileAppender'
__LOG4SH_APPENDER_FILE='FileAppender'
__LOG4SH_APPENDER_ROLLING_FILE='RollingFileAppender'
__LOG4SH_APPENDER_ROLLING_FILE_MAX_BACKUP_INDEX=1
__LOG4SH_APPENDER_ROLLING_FILE_MAX_FILE_SIZE=10485760
__LOG4SH_APPENDER_SMTP='SMTPAppender'
__LOG4SH_APPENDER_SYSLOG='SyslogAppender'
__LOG4SH_APPENDER_SYSLOG_FACILITIES=' auth authpriv cron daemon ftp kern lpr mail news syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 '

__LOG4SH_LAYOUT_HTML='HTMLLayout'
__LOG4SH_LAYOUT_SIMPLE='SimpleLayout'
__LOG4SH_LAYOUT_PATTERN='PatternLayout'

__LOG4SH_LEVEL_TRACE=0
__LOG4SH_LEVEL_DEBUG=1
__LOG4SH_LEVEL_INFO=2
__LOG4SH_LEVEL_WARN=3
__LOG4SH_LEVEL_ERROR=4
__LOG4SH_LEVEL_FATAL=5
__LOG4SH_LEVEL_OFF=6
__LOG4SH_LEVEL_CLOSED=255

__LOG4SH_PATTERN_DEFAULT='%d %p - %m%n'
__LOG4SH_THREAD_DEFAULT='main'

# the following string is *supposed* to be on two lines!!
__LOG4SH_IFS="
"

# set the constants to readonly
for _const in `set |grep "^__LOG4SH_" |cut -d= -f1`; do
  readonly $_const
done
unset _const

#
# variables
#
__log4sh_filename="`basename $0`"

__log4shAppenders=''
__log4shAppenderCount=0
__log4shAppenderCounts=''
__log4shAppenderLayouts=''
__log4shAppenderLevels=''
__log4shAppenderPatterns=''
__log4shAppenderTypes=''
__log4shAppender_file_files=''
__log4shAppender_rollingFile_maxBackupIndexes=''
__log4shAppender_rollingFile_maxFileSizes=''
__log4shAppender_smtp_tos=''
__log4shAppender_smtp_subjects=''
__log4shAppender_syslog_facilities=''

__log4shThreadName=$__LOG4SH_THREAD_DEFAULT
__log4shThreadStack=$__LOG4SH_THREAD_DEFAULT

#=============================================================================
# log4sh private functions
#

#-----------------------------------------------------------------------------
# miscellaneous
#

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_mktempDir</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Creates a secure temporary directory within which temporary files can
#   be created.  Honors the TMPDIR environment variable if it is set.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>tmpDir=`_log4sh_mktempDir`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_mktempDir()
{
  _tmpDir="${TMPDIR-/tmp}/log4sh.$RANDOM$RANDOM$RANDOM$$"
  (umask 077 && mkdir "${_tmpDir}") || {
    echo "log4sh:FATAL could not create temporary directory!  exiting" >&2
    exit 1
  }
  echo ${_tmpDir}
  unset _tmpDir
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_level2tag</function></funcdef>
#       <paramdef>integer <parameter>_level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Converts an internally used level constant into its external tag
#   equivalent</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>tag=`_log4sh_level2tag 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_level2tag()
{
  _level=$1

  _return=${__LOG4SH_TRUE}
  _tag=''

  case $_level in
    $__LOG4SH_LEVEL_TRACE) _tag='TRACE' ;;
    $__LOG4SH_LEVEL_DEBUG) _tag='DEBUG' ;;
    $__LOG4SH_LEVEL_INFO) _tag='INFO' ;;
    $__LOG4SH_LEVEL_WARN) _tag='WARN' ;;
    $__LOG4SH_LEVEL_ERROR) _tag='ERROR' ;;
    $__LOG4SH_LEVEL_FATAL) _tag='FATAL' ;;
    $__LOG4SH_LEVEL_OFF) _tag='OFF' ;;
    $__LOG4SH_LEVEL_CLOSED) _tag='CLOSED' ;;
    *) _return=$__LOG4SH_FALSE ;;
  esac

  echo ${_tag}
  unset _level _tag
  return ${_return}
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_tag2level</function></funcdef>
#       <paramdef>string <parameter>_tag</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Converts an externally used level tag into its internal constant
#   equivalent</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>level=`_log4sh_tag2level WARN`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_tag2level()
{
  _tag=$1

  _level=''
  _return=${__LOG4SH_TRUE}

  case $_tag in
    TRACE) _level=${__LOG4SH_LEVEL_TRACE} ;;
    DEBUG) _level=${__LOG4SH_LEVEL_DEBUG} ;;
    INFO) _level=${__LOG4SH_LEVEL_INFO} ;;
    WARN) _level=${__LOG4SH_LEVEL_WARN} ;;
    ERROR) _level=${__LOG4SH_LEVEL_ERROR} ;;
    FATAL) _level=${__LOG4SH_LEVEL_FATAL} ;;
    OFF) _level=${__LOG4SH_LEVEL_OFF} ;;
    CLOSED) _level=${__LOG4SH_LEVEL_CLOSED} ;;
    *) _return=${__LOG4SH_FALSE} ;;
  esac

  echo ${_level}
  unset _level _tag
  return ${_return}
}

#-----------------------------------------------------------------------------
# array handling
#
# note: arrays are '1' based
#

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_findArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Find the position of element in an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pos=`_log4sh_findArrayElement "$array" $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_findArrayElement()
{
  pos=`echo "$1" |awk '$0==e{print NR}' e="$2"`
  [ -n "$pos" ] && echo "$pos" || echo 0
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>integer <parameter>position</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Retrieve the element at the given position from an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>element=`_log4sh_getArrayElement "$array" $position`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getArrayElement()
{
  _index=$2
  _oldIFS="${IFS}"; IFS="$__LOG4SH_IFS"
  set -- junk ${1}
  IFS="${_oldIFS}"; unset _oldIFS

  shift $_index
  echo $1

  unset _index
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry align="left">
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getArrayLength</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the length of an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>length=`_log4sh_getArrayLength "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getArrayLength()
{
  _oldIFS="${IFS}"; IFS="$__LOG4SH_IFS"
  set -- ${1}
  IFS="${_oldIFS}"; unset _oldIFS
  echo $#
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string[]</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_setArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>integer <parameter>position</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Place an element at a given location in an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_setArrayElement "$array" $position $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_setArrayElement()
{
  echo "$1" |awk '{if(NR==r){print e}else{print $0}}' r=$2 e="$3"
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_peekStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Return the topmost element on a stack without removing the
#   element.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>element=`_log4sh_peekStack "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_peekStack()
{
  echo "$@" |awk '{line=$0}END{print line}'
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string[]</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_popStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Remove the top-most element from a stack.  This command takes a
#   normal log4sh string array as input, but treats it as though it were a
#   stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_popStack "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_popStack()
{
  _array="$1"
  _length=`_log4sh_getArrayLength "$_array"`
  echo "$_array" |awk '{if(NR<r){print $0}}' r=$_length
  unset _array _length
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_pushStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add a new element to the top of a stack.  This command takes a normal
#   log4sh string array as input, but treats it as though it were a
#   stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_pushStack "$array" $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_pushStack()
{
  echo "${1:+${1}${__LOG4SH_IFS}}${2}"
}

#-----------------------------------------------------------------------------
# Properties file functions
#

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getPropPrefix</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Takes a string (eg. "log4sh.appender.stderr.File") and returns the
#   prefix of it (everything before the first '.' char).  Normally used in
#   parsing the log4sh configuration file.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>prefix=`_log4sh_getPropPrefix $property"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getPropPrefix()
{
  _oldIFS="${IFS}"; IFS="."
  set -- ${1}
  IFS="${_oldIFS}"; unset _oldIFS
  echo ${1}
}

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_stripPropPrefix</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Strips the prefix off a property configuration command and returns
#   the string.  E.g. "log4sh.appender.stderr.File" becomes
#   "appender.stderr.File".</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newProperty=`_log4sh_stripPropPrefix $property`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_stripPropPrefix()
{
  expr ${1} : '[^.]*\.\(.*\)'
}

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propAppender</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#       <paramdef>string <parameter>value</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Configures log4sh using an appender property configuration statement</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_log4sh_propAppender $property $value</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propAppender()
{
  _key=$1
  _value=$2

  # strip the leading appender name
  _key=`_log4sh_stripPropPrefix $_key`

  # handle appender definitions
  if [ "$_key" '=' "`echo $_key |sed 's/\.//g'`" ]; then
    case $_value in
      $__LOG4SH_APPENDER_CONSOLE) appender_setType $_key $_value ;;
      $__LOG4SH_APPENDER_FILE) appender_setType $_key $_value ;;
      $__LOG4SH_APPENDER_DAILY_ROLLING_FILE) appender_setType $_key $_value ;;
      $__LOG4SH_APPENDER_ROLLING_FILE) appender_setType $_key $_value ;;
      $__LOG4SH_APPENDER_SMTP) appender_setType $_key $_value ;;
      *) echo "log4sh:ERROR appender type ($_value) unrecognized" >&2 ;;
    esac
    unset _key _value
    return
  fi

  # handle appender values and methods
  _appender=`_log4sh_getPropPrefix $_key`
  _key=`_log4sh_stripPropPrefix $_key`
  if [ "$_key" '=' "`echo $_key |sed 's/\.//g'`" ]; then
    case $_key in
      DatePattern) ;;  # unsupported
      File) appender_file_setFile $_appender "$_value" ;;
      MaxBackupIndex) ;;  # unsupported
      MaxFileSize) ;;  # unsupported
      Threshold) appender_setLevel $_appender "$_value" ;;
      To) appender_smtp_setTo $_appender "$_value" ;;
      Subject) appender_smtp_setSubject $_appender "$_value" ;;
      layout) appender_setLayout $_appender "$_value" ;;
      *) echo "log4sh:ERROR appender value/method ($_key) unrecognized" >&2 ;;
    esac
    unset _key _value _appender
    return
  fi

  # handle appender layout values and methods
  _key=`_log4sh_stripPropPrefix $_key`
  case $_key in
    ConversionPattern) appender_setPattern $_appender "$_value" ;;
    *) echo "log4sh:ERROR layout value/method ($_key) unrecognized" >&2 ;;
  esac
  unset _key _value _appender
}

#/**
# <s:function group="properties" isPrivate="true">
# <!-- XXX what the f*** is this function for?? -->
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propLogger</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#       <paramdef>string <parameter>value</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>(future) Configures log4sh with a <code>logger</code> configuration
#   statement.  Sample output: "logger: property value".</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>result=`_log4sh_propLogger $property $value`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propLogger()
{
  _prop=`_log4sh_stripPropPrefix $1`
  echo "logger: $_prop $2"
  unset _prop
}

#
# configure log4sh with a rootLogger configuration statement
#
# @param  _key    configuration command
# @param  _value  configuration value
#
#/**
# <s:function group="properties" isPrivate="true">
# <!-- XXX what the f*** is this function for?? -->
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propRootLogger</function></funcdef>
#       <paramdef>string <parameter>value</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Configures log4sh with a <code>rootLogger</code> configuration
#   statement.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_log4sh_propRootLogger $value</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propRootLogger()
{
  _value=$1

  _count=`echo $_value |sed 's/,/ /' |wc -w`
  _i=1
  while [ $_i -le $_count ]; do
    _a=`echo $_value |cut -d, -f$_i`
    if [ $_i -eq 1 ]; then
      logger_setLevel $_a
    else
      logger_addAppender $_a
    fi
    _i=`expr $_i + 1`
  done

  unset _a _count _i
  unset _value
}

#/**
# <s:function group="properties">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>log4sh_readProperties</function></funcdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Reads a properties file and calls appropriate configuration
#   functions.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pos=`_log4sh_findArrayElement "$array" $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
log4sh_readProperties()
{
  _file=$1

  _tmpDir=`_log4sh_mktempDir`
  _tmpFile="$_tmpDir/properties"
  grep "^log4sh\." $_file >$_tmpFile
  _rp_count=`cat $_tmpFile |wc -l`
  _rp_i=1
  while [ $_rp_i -le $_rp_count ]; do
    _line=`awk "$_rp_i==NR {print}" $_tmpFile`
    _key=`echo "$_line" |sed 's^\([^=]*\)=.*\1'`
    _value=`echo "$_line" |sed 's^[^=]*=\(.*\)\1'`

    # strip the leading 'log4sh.'
    _key=`_log4sh_stripPropPrefix $_key`
    _keyword=`_log4sh_getPropPrefix $_key`
    case $_keyword in
      appender) _log4sh_propAppender $_key "$_value" ;;
      external) ;;
      logger) _log4sh_propLogger $_key "$_value" ;;
      rootLogger) _log4sh_propRootLogger "$_value" ;;
      *) echo "log4sh:ERROR unrecognized properties keyword ($_keyword)" >&2 ;;
    esac

    _rp_i=`expr $_rp_i + 1`
  done
  rm -fr $_tmpDir

  unset _tmpDir _tmpFile _rp_i _rp_count _line _key _value _keyword
  unset _file
}

#=============================================================================
# Logger
#

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_addAppender</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add and initialize a new appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_addAppender $appender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_addAppender()
{
  __log4shAppenders=`_log4sh_pushStack "$__log4shAppenders" $1`
  __log4shAppenderCount=`expr $__log4shAppenderCount + 1`
  __log4shAppenderCounts="${__log4shAppenderCounts} ${__log4shAppenderCount}"
  __log4shAppenderLayouts=`_log4sh_pushStack "$__log4shAppenderLayouts" "$__LOG4SH_LAYOUT_SIMPLE"`
  __log4shAppenderLevels=`_log4sh_pushStack "$__log4shAppenderLevels" -`
  __log4shAppenderPatterns=`_log4sh_pushStack "$__log4shAppenderPatterns" "$__LOG4SH_PATTERN_DEFAULT"`
  __log4shAppenderTypes=`_log4sh_pushStack "$__log4shAppenderTypes" -`
  __log4shAppender_file_files=`_log4sh_pushStack "$__log4shAppender_file_files" -`
  __log4shAppender_rollingFile_maxBackupIndexes=`_log4sh_pushStack "$__log4shAppender_rollingFile_maxBackupIndexes" $__LOG4SH_APPENDER_ROLLING_FILE_MAX_BACKUP_INDEX`
  __log4shAppender_rollingFile_maxFileSizes=`_log4sh_pushStack "$__log4shAppender_rollingFile_maxFileSizes" $__LOG4SH_APPENDER_ROLLING_FILE_MAX_FILE_SIZE`
  __log4shAppender_smtp_tos=`_log4sh_pushStack "$__log4shAppender_smtp_tos" -`
  __log4shAppender_smtp_subjects=`_log4sh_pushStack "$__log4shAppender_smtp_subjects" -`
  __log4shAppender_syslog_facilities=`_log4sh_pushStack "$__log4shAppender_syslog_facilities" -`
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_addAppenderWithPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add and initialize a new appender with a specific PatternLayout</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_addAppenderWithPattern $appender '%d %p - %m%n'</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_addAppenderWithPattern()
{
  _myAppender=$1
  _myPattern=$2

  logger_addAppender $_myAppender
  appender_setLayout $_myAppender "$__LOG4SH_LAYOUT_PATTERN"
  appender_setPattern $_myAppender "$_myPattern"

  unset _myAppender _myPattern
}

#/**
# <s:function group="PatternLayout">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setFilename</function></funcdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the filename to be shown when the '%F' conversion character is
#   used in a PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setFilename "myScript.sh"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setFilename()
{
  __log4sh_filename="$1"
}

#/**
# <s:function group="Levels">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_getLevel</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the global default logging level (e.g. DEBUG).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>level=`logger_getLevel`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_getLevel()
{
  _log4sh_level2tag $__log4shLevel
}

#/**
# <s:function group="Levels">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setLevel</function></funcdef>
#       <paramdef>string <parameter>level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the global default logging level (e.g. DEBUG).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setLevel INFO</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setLevel()
{
  _tag=$1

  _level=`_log4sh_tag2level $_tag`
  if [ $? -eq $__LOG4SH_TRUE ]; then
    __log4shLevel=$_level
  else
    echo "log4sh:ERROR attempt to set invalid log level '$_tag'" >&2
  fi

  unset _level _tag
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_getThreadName</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current thread name.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>threadName=`logger_getThreadName`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_getThreadName()
{
  echo $__log4shThreadName
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setThreadName</function></funcdef>
#       <paramdef>string <parameter>threadName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the thread name (e.g. the name of the script).  This thread name
#   can be used with the '%t' conversion character within a
#   PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setThreadName "myThread"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setThreadName()
{
  _thread=$1

  _length=`_log4sh_getArrayLength "$__log4shThreadStack"`
  __log4shThreadStack=`_log4sh_setArrayElement "$__log4shThreadStack" $_length $_thread`
  __log4shThreadName=$_thread

  unset _index _thread
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_pushThreadName</function></funcdef>
#       <paramdef>string <parameter>threadName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the thread name (eg. the name of the script) and pushes the old
#   on to a stack for later use.  This thread name can be used with the '%t'
#   conversion character within a PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_pushThreadName "myThread"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_pushThreadName()
{
  __log4shThreadStack=`_log4sh_pushStack "$__log4shThreadStack" $1`
  __log4shThreadName=$1
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_popThreadName</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Removes the topmost thread name from the stack.  The next thread name
#   on the stack is then placed in the __log4shThreadName variable.  If the
#   stack is empty, or has only one element left, then a warning is given that
#   no more thread names can be popped from the stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_popThreadName</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_popThreadName()
{
  _length=`_log4sh_getArrayLength "$__log4shThreadStack"`
  if [ $_length -gt 1 ]; then
    __log4shThreadStack=`_log4sh_popStack "$__log4shThreadStack"`
    __log4shThreadName=`_log4sh_peekStack "$__log4shThreadStack"`
  else
    echo "log4sh:WARN no more thread names available on thread name stack." >&2
  fi
}

#=============================================================================
# Appenders
#

#/**
# <!-- XXX should this function even exist ?? -->
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getNameByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the name of the appender at the given position in the appender
#   array.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appenderName=`_appender_getNameByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getNameByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $1
}

#/**
# <!-- TODO write this function ?? -->
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_setNameByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#       <paramdef>string <parameter>appenderName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>(future) Sets the name of the appender at the given position in the
#   appender array.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_setNameByIndex 3 "myAppender"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_setNameByIndex()
{
  return $__LOG4SH_TRUE
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_parsePattern</function></funcdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#       <paramdef>string <parameter>priority</parameter></paramdef>
#       <paramdef>string <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Generate a logging message given a Pattern, priority, and message.
#   All dates will be represented as ISO 8601 dates (YYYY-MM-DD
#   HH:MM:SS).</para>
#   <para>Note: the '<code>%r</code>' character modifier does not work in the
#   Solaris <code>/bin/sh</code> shell</para>
#   <para>Example:
#     <blockquote>
#       <funcsynopsis>
#         <funcsynopsisinfo>_appender_parsePattern '%d %p - %m%n' INFO "message to log"</funcsynopsisinfo>
#       </funcsynopsis>
#     </blockquote>
#   </para>
# </entry>
# </s:function>
#*/
_appender_parsePattern()
{
  _pattern=$1
  _priority=$2
  _msg=$3

  # set date to ISO 8601 format
  _oldIFS="${IFS}"; IFS="%"; set -- x${_pattern}; IFS="${_oldIFS}"
  if [ ${#} -gt 1 ]; then
    IFS="d"; set -- ${_pattern}; IFS="${_oldIFS}"
    [ ${#} -gt 1 ] && _date=`date '+%Y-%m-%d %H:%M:%S'`
  fi
  unset _oldIFS

  echo "${_pattern}" |sed \
-e 's/%c/shell/' \
-e "s/%d/${_date}/" \
-e "s/%F/${__log4sh_filename}/" \
-e 's/%L//' \
-e 's/%n//' \
-e "s/%-*[0-9]*p/${_priority}/" \
-e "s/%-*[0-9]*r/${SECONDS}/" \
-e "s/%t/${__log4shThreadName}/" \
-e 's/%x//' \
-e "s%m${_msg}"
  unset _date _pattern _tag _msg
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getPatternByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Pattern of an Appender at the specified array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pattern=`_appender_getPatternByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getPatternByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Pattern of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pattern=`appender_getPattern myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getPattern()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Pattern of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setPattern myAppender '%d %p - %m%n'</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setPattern()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  __log4shAppenderPatterns=`_log4sh_setArrayElement "$__log4shAppenderPatterns" $_index "$2"`
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getTypeByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Type of an Appender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getTypeByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getTypeByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderTypes" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Type of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getType myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getType()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderTypes" $_index
  unset $_index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getAppenderType</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Gets the Type of an Appender at the
#   given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getAppenderType 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getAppenderType()
{
  _appender_getTypeByIndex "$@"
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>type</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Type of an Appender (e.g. FileAppender)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setType myAppender FileAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setType()
{
  # XXX need to do any cleanup when changing a previously defined appender??
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  __log4shAppenderTypes=`_log4sh_setArrayElement "$__log4shAppenderTypes" $_index "$2"`
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>type</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis>Sets the Type of an Appender (e.g.
#   FileAppender)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setAppenderType myAppender FileAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderType()
{
  appender_setType "$@"
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getLayoutByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Layout of an Appender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getLayoutByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getLayoutByIndex()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderLayouts" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getLayout</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Layout of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getLayout myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getLayout()
{
  _log4sh_getArrayElement "$__log4shAppenderLayouts" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setLayout</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>layout</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Layout of an Appender (e.g. PatternLayout)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setLayout myAppender PatternLayout</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setLayout()
{
  _layout=$2
   
  case $_layout in
  '') _layout=$__LOG4SH_LAYOUT_SIMPLE ;;
  $__LOG4SH_LAYOUT_HTML|$__LOG4SH_LAYOUT_SIMPLE|$__LOG4SH_LAYOUT_PATTERN) ;;
  *)
    echo "log4sh:ERROR unknown layout $_layout" >&2
    return $__LOG4SH_FALSE
    ;;
  esac

  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  __log4shAppenderLayouts=`_log4sh_setArrayElement "$__log4shAppenderLayouts" $_index "$_layout"`

  unset _index _layout
  return $__LOG4SH_TRUE
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getLevelByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current logging Level of an Appender at the given array
#   index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getLevelByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getLevelByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderLevels" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getLevel</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current logging Level of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getLevel myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getLevel()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderLevels" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setLevel</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Level of an Appender (e.g. INFO)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setLevel myAppender INFO</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setLevel()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  __log4shAppenderLevels=`_log4sh_setArrayElement "$__log4shAppenderLevels" $_index "$2"`
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_close</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Disable any further logging via an appender.  Once closed, the
#   appender can be reopened by setting it to any logging Level (e.g.
#   INFO).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_close myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_close()
{
  appender_setLevel $1 CLOSED
}

#-----------------------------------------------------------------------------
# FileAppender
#

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_file_getFileByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the filename of a FileAppender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_file_getFileByIndex 3</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_file_getFileByIndex()
{
  _log4sh_getArrayElement "$__log4shAppender_file_files" $1
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_file_getFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the filename of a FileAppender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_file_getFile myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_file_getFile()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_file_files" $_index
  unset _index
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_file_setFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the filename for a FileAppender (e.g. "STDERR" or
#   "/var/log/log4sh.log")</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_file_setFile myAppender STDERR</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_file_setFile()
{
  _appender=$1
  _file=$2

  if [ -n "$_appender" -a -n "$_file" ]; then
    # set the file
    _index=`_log4sh_findArrayElement "$__log4shAppenders" $_appender`
    __log4shAppender_file_files=`_log4sh_setArrayElement "$__log4shAppender_file_files" $_index "$_file"`
    _return=$?

    # create the file (if it isn't already)
    if [ $_return -eq $__LOG4SH_TRUE \
      -a ! "$_file" '=' "-" \
      -a ! "$_file" '=' "STDERR" \
      -a ! -f "$_file" \
    ]; then
      touch $_file 2>/dev/null
      _result=$?
      # determine success of touch command
      if [ $_result -eq 1 ]; then
	echo "log4sh:ERROR appender_file_setFile(): could not create file; closing appender" >&2
	appender_setLevel $_appender $__LOG4SH_LEVEL_CLOSED
      fi
    fi
  else
    echo "log4sh:ERROR appender_file_setFile(): missing appender and/or file" >&2
    _return=$__LOG4SH_FALSE
  fi

  unset _index
  unset _appender _file
  return $_return
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Set the filename for a FileAppender
#   (e.g. "STDERR" or "/var/log/log4sh.log")</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setAppenderFile myAppender STDERR</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderFile()
{
  appender_file_setFile "$@"
}

#-----------------------------------------------------------------------------
# SMTPAppender
#

#
# gets the SMTP To address of appender at the specified array index
#
# @param  _index  array index of the address
# @echo   string  the To address for the appender
#
appender_smtp_getTo()
{
  _log4sh_getArrayElement "$__log4shAppender_smtp_tos" $1
}

#
# sets the To address for an appender
#
# @param  _appender  name of the appender
# @param  _to        the To address for the appender
#
appender_smtp_setTo()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  __log4shAppender_smtp_tos=`_log4sh_setArrayElement "$__log4shAppender_smtp_tos" $_index "$2"`
  unset _index
}

# (deprecated)
appender_setAppenderRecipient()
{
  appender_smtp_setTo "$@"
}

#
# gets the SMTP subject of appender at the specified array index
#
# @param  _index  array index of the subject
# @echo   string  the Subject for the appender
#
appender_smtp_getSubject()
{
  _log4sh_getArrayElement "$__log4shAppender_smtp_subjects" $1
}

#
# sets the subjects for an appender
#
# @param   _appender  name of appender
# @param   _subject   the Subject for the appender
# @return  boolean    was the operation successful ?
#
appender_smtp_setSubject()
{
  _appender=$1
  _subject=$2

  # set the Subject
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $_appender`
  if [ $_index -gt 0 ]; then
    __log4shAppender_smtp_subjects=`_log4sh_setArrayElement "$__log4shAppender_smtp_subjects" $_index "$_subject"`
    _return=$__LOG4SH_TRUE
  else
    echo "log4sh:ERROR could not set Subject for appender ($_appender)" >&2
    _return=$__LOG4SH_FALSE
  fi

  unset _index
  unset _appender _subject
  return $_return
}

# deprecated
appender_setAppenderSubject()
{
  appender_smtp_getSubject "$@"
}

#-----------------------------------------------------------------------------
# SyslogAppender
#

#
# gets the syslog facility of the specified appender by index
#
# @param  _index  array index of facility
# @echo   string  syslog facility of specified appender
#
appender_syslog_getFacilityByIndex()
{
  _log4sh_getArrayElement "$__log4shAppender_syslog_facilities" $1
}

# deprecated
appender_getSyslogFacility()
{
  appender_syslog_getFacilityByIndex "$@"
}

#
# gets the syslog facility of the specified appender by name
#
# @param  string  appender name
# @echo   string  syslog facility of specified appender
#
appender_syslog_getFacilityByName()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_syslog_facilities" $_index
  unset _index
}

#
# sets the syslog facility of the specified appender
#
# @param   _appender  name of appender
# @param   _facility  syslog facility for the appender
# @return  boolean    was the operation successful?
#
appender_syslog_setFacility()
{
  _appender=$1
  _facility=$2

  if [ $# -ne 2 ]; then
    echo "log4sh:ERROR appender_syslog_setFacility(): missing attributes" >&2
    return $__LOG4SH_FALSE
  fi

  _found=$__LOG4SH_FALSE

  # verify facility

  # old - a while loop?  what was I thinking
  #_index=1
  #_count=`echo $__LOG4SH_APPENDER_SYSLOG_FACILITIES |wc -w`
  #while [ $_index -le $_count -a $_found -ne $__LOG4SH_TRUE ]
  #do
  #  _f=`echo $__LOG4SH_APPENDER_SYSLOG_FACILITIES |cut -d' ' -f$_index`
  #  [ "$_f" '=' "$_facility" ] && _found=$__LOG4SH_TRUE
  #  _index=`expr $_index + 1`
  #done
  #unset _count

  # new - a simple grep
  echo $__LOG4SH_APPENDER_SYSLOG_FACILITIES |grep " ${_facility} " >/dev/null
  [ $? -eq 0 ] && _found=$__LOG4SH_TRUE

  # was the facility found?
  if [ $_found -ne $__LOG4SH_TRUE ]; then
    echo "log4sh:ERROR syslog facility ($_facility) unrecognized" >&2
    _return=$__LOG4SH_FALSE
  fi

  # set appender facility
  if [ $_found -eq $__LOG4SH_TRUE ]; then
    _index=`_log4sh_findArrayElement "$__log4shAppenders" $_appender`
    __log4shAppender_syslog_facilities=`_log4sh_setArrayElement "$__log4shAppender_syslog_facilities" $_index "$_facility"`
    _return=$__LOG4SH_TRUE
  fi

  unset _appender _f _facility _found _index
  return $_return
}

# deprecated
appender_setSyslogFacility()
{
  appender_syslog_setFacility $1 $2
}

#
# TODO: getHost()
#
# @param _appender
#
appender_syslog_getHost()
{
  return $__LOG4SH_TRUE
}

#
# TODO: setHost()
#
# @param _appender
#
appender_syslog_setHost()
{
  return $__LOG4SH_TRUE
}

#=============================================================================
# Log
#

#
# base logging command that logs a message to all defined appenders
#
# @param  _tag  logging level to log the message at
# @param  _msg  message to be logged
#
log()
{
  _tag=${1}
  shift
  _msg="${@}"

  _thisLevel=`_log4sh_tag2level ${_tag}`

  for _appenderIndex in ${__log4shAppenderCounts}; do
    # determine appender level
    _appenderLevelTag=`_appender_getLevelByIndex ${_appenderIndex}`
    if [ "${_appenderLevelTag}" = "-" ]; then
      # continue if requested is level less than general level
      [ ! ${__log4shLevel} -le ${_thisLevel} ] && continue
    else
      _appenderLevel=`_log4sh_tag2level ${_appenderLevelTag}`
      # continue if requested level is less than specific appender level
      [ ! $_appenderLevel -le ${_thisLevel} ] && continue
    fi

    # determine appender layout
    _appenderLayout=`_appender_getLayoutByIndex ${_appenderIndex}`
    case ${_appenderLayout} in
      ${__LOG4SH_LAYOUT_SIMPLE}|\
      ${__LOG4SH_LAYOUT_HTML})
	_thisLayout="${_tag} - ${_msg}"
	;;
      ${__LOG4SH_LAYOUT_PATTERN}) 
	_appenderPattern=`_appender_getPatternByIndex ${_appenderIndex}`
	_thisLayout=`_appender_parsePattern "${_appenderPattern}" ${_tag} "${_msg}"`
	;;
    esac

    # log to appender
    _appenderType=`_appender_getTypeByIndex ${_appenderIndex}`
    case ${_appenderType} in
      ${__LOG4SH_APPENDER_CONSOLE})
        echo "${_thisLayout}"
	;;
      ${__LOG4SH_APPENDER_FILE}|\
      ${__LOG4SH_APPENDER_ROLLING_FILE}|\
      ${__LOG4SH_APPENDER_DAILY_ROLLING_FILE})
	_appenderFile=`_appender_file_getFileByIndex ${_appenderIndex}`
	if [ "${_appenderFile}" = "STDERR" ]; then
	  echo "${_thisLayout}" >&2
	elif [ "${_appenderFile}" != "-" ]; then
	  # do rotation
	  _appenderName=`_appender_getNameByIndex ${_appenderIndex}`
	  case ${_appenderName} in
	    ${__LOG4SH_APPENDER_ROLLING_FILE})
	      # check whether the max file size has been exceeded
	      _rotSize=${__LOG4SH_APPENDER_ROLLING_FILE_MAX_FILE_SIZE}
	      _size=`ls -s ${_appenderFile} |cut -d' ' -f1`
	      if [ ${_size} -gt ${_rotSize} ]; then
	        # rotate the appender file(s)
		_rotIndex=${__LOG4SH_APPENDER_ROLLING_FILE_MAX_BACKUP_INDEX}
		_rotFile="${_appenderFile}.${_rotIndex}"
		[ -f "${_rotFile}" ] && rm -f "${_rotFile}"
		while [ ${_rotIndex} -gt 0 ]; do
		  _rotIndexLast=${_rotIndex}
		  _rotFileLast="${_rotFile}"
		  _rotIndex=`expr ${_rotIndex} - 1`
		  _rotFile="${_appenderFile}.${_rotIndex}"
		  [ -f "${_rotFile}" ] && mv -f "${_rotFile}" "${_rotFileLast}"
		done
		unset _rotFile _rotFileLast _rotIndex _rotIndexLast
	      fi
	      unset _size
	      ;;
	    ${__LOG4SH_APPENDER_DAILY_ROLLING_FILE})
	      ;;
	  esac
	  echo "${_thisLayout}" >>${_appenderFile}
	else
	  :
	fi
	;;
      ${__LOG4SH_APPENDER_SMTP})
        _smtpTo=`appender_smtp_getTo ${_appenderIndex}`
        _smtpSubject=`appender_smtp_getSubject ${_appenderIndex}`
        echo "${_thisLayout}" |mail -s "${_smtpSubject}" ${_smtpTo}
	unset _smtpTo _smtpSubject
        ;;
      $__LOG4SH_APPENDER_SYSLOG)
        _tmpFacility=`appender_syslog_getFacilityByIndex ${_appenderIndex}`
	logger -p "${_tmpFacility}.info" "${_thisLayout}"
	unset _tmpFacility
	;;
    esac
  done

  unset _msg _tag _thisLayout _thisLevel
  unset _appenderFile _appenderIndex _appenderLayout _appenderLevel
  unset _appenderLevelTag _appenderName _appenderPattern _appenderType
}

#
# This is a helper function for log function in the TRACE priority mode.
#
# @param  string  message to be logged
#
logger_trace()
{
  log TRACE "$@"
}

#
# This is a helper function for log function in the DEBUG priority mode.
#
# @param  string  message to be logged
#
logger_debug()
{
  log DEBUG "$@"
}

#
# This is a helper function for log function in the INFO priority mode.
#
# @param  string  message to be logged
#
logger_info()
{
  log INFO "$@"
}

#
# This is a helper function for log function in the WARN priority mode.
#
# @param  string  message to be logged
#
logger_warn()
{
  log WARN "$@"
}

#
# This is a helper function for log function in the ERROR priority mode.
#
# @param  string  message to be logged
#
logger_error()
{
  log ERROR "$@"
}

#
# This is a helper function for log function in the FATAL priority mode.
#
# @param  string  message to be logged
#
logger_fatal()
{
  log FATAL "$@"
}

#
# main
#

# load the properties file
if [ -n "$LOG4SH_CONFIGURATION" -a -r "$LOG4SH_CONFIGURATION" ]; then
  log4sh_readProperties $LOG4SH_CONFIGURATION
elif [ -z "$LOG4SH_CONFIGURATION" -a -r "$__LOG4SH_CONFIGURATION" ]; then
  log4sh_readProperties $__LOG4SH_CONFIGURATION
else
  if [ "$LOG4SH_CONFIGURATION" != "none" ]; then
    echo "log4sh:WARN No appenders could be found." >&2
    echo "log4sh:WARN Please initalize the log4sh system properly." >&2
  fi
  logger_setLevel ERROR
  logger_addAppender stdout
  appender_setType stdout ConsoleAppender
  appender_setLayout stdout PatternLayout
  appender_setPattern stdout "%-4r [%t] %-5p %c %x - %m%n"
fi

# treat unset variables as an error when substituting (disable)
set +u

#/**
# </s:shelldoc>
#*/
