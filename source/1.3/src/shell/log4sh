# $Id$
# vim:syntax=sh:sts=2
#/**
# <?xml version="1.0" encoding="UTF-8"?>
# <s:shelldoc xmlns:s="http://www.forestent.com/2005/XSL/ShellDoc">
# <s:header>
# log4sh 1.3.6
#
# http://log4sh.sourceforge.net/
#
# written by Kate Ward &lt;kate.ward@forestent.com>
# released under the LGPL
#
# this module implements something like the log4j module from the Apache group
#
# notes:
# *) the default appender is a ConsoleAppender called stdout with a level
#    of ERROR and SimpleLayout
# *) the appender levels are as follows (decreasing order of output):
#    TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# </s:header>
#*/

# shell flags for log4sh:
# u - treat unset variables as an error when performing parameter expansion
__LOG4SH_SHELL_FLAGS='u'

# save the current set of shell flags, and then set some for log4sh
__log4sh_oldShellFlags="$-"
for _log4sh_shellFlag in `echo "${__LOG4SH_SHELL_FLAGS}" |sed 's/\(.\)/\1 /g'`
do
  set -${_log4sh_shellFlag}
done

#
# constants
#
__LOG4SH_VERSION='1.3.6pre'

__LOG4SH_TRUE=0
__LOG4SH_FALSE=1
__LOG4SH_ERROR=2
__LOG4SH_NULL='-'

__LOG4SH_APPENDER_FUNC_PREFIX='_log4sh_app_'
__LOG4SH_APPENDER_DATA_EXT='.app'
__LOG4SH_APPENDER_INCLUDE_EXT='.inc'

__LOG4SH_TYPE_CONSOLE='ConsoleAppender'
__LOG4SH_TYPE_DAILY_ROLLING_FILE='DailyRollingFileAppender'
__LOG4SH_TYPE_FILE='FileAppender'
__LOG4SH_TYPE_ROLLING_FILE='RollingFileAppender'
__LOG4SH_TYPE_ROLLING_FILE_MAX_BACKUP_INDEX=1
__LOG4SH_TYPE_ROLLING_FILE_MAX_FILE_SIZE=10485760
__LOG4SH_TYPE_SMTP='SMTPAppender'
__LOG4SH_TYPE_SYSLOG='SyslogAppender'
__LOG4SH_TYPE_SYSLOG_FACILITIES=' auth authpriv cron daemon ftp kern lpr mail news syslog user uucp local0 local1 local2 local3 local4 local5 local6 local7 '
__LOG4SH_TYPE_SYSLOG_FACILITY='user'

__LOG4SH_LAYOUT_HTML='HTMLLayout'
__LOG4SH_LAYOUT_SIMPLE='SimpleLayout'
__LOG4SH_LAYOUT_PATTERN='PatternLayout'

__LOG4SH_LEVEL_TRACE=0
__LOG4SH_LEVEL_TRACE_STR='TRACE'
__LOG4SH_LEVEL_DEBUG=1
__LOG4SH_LEVEL_DEBUG_STR='DEBUG'
__LOG4SH_LEVEL_INFO=2
__LOG4SH_LEVEL_INFO_STR='INFO'
__LOG4SH_LEVEL_WARN=3
__LOG4SH_LEVEL_WARN_STR='WARN'
__LOG4SH_LEVEL_ERROR=4
__LOG4SH_LEVEL_ERROR_STR='ERROR'
__LOG4SH_LEVEL_FATAL=5
__LOG4SH_LEVEL_FATAL_STR='FATAL'
__LOG4SH_LEVEL_OFF=6
__LOG4SH_LEVEL_OFF_STR='OFF'
__LOG4SH_LEVEL_CLOSED=255
__LOG4SH_LEVEL_CLOSED_STR='CLOSED'

__LOG4SH_PATTERN_DEFAULT='%d %p - %m%n'
__LOG4SH_THREAD_DEFAULT='main'

__LOG4SH_DEFAULT_IFS=' '
# the following IFS is *supposed* to be on two lines!!
__LOG4SH_ARRAY_IFS="
"
__LOG4SH_TRAP_EXIT='log4sh-EXIT'

# set the constants to readonly
for _log4sh_const in `set |grep "^__LOG4SH_" |cut -d= -f1`; do
  readonly ${_log4sh_const}
done
unset _log4sh_const

#
# variables
#

# external variables

# configure log4sh logging. set the LOG4SH_INFO environment variable to any
# non-empty value to enable info output, LOG4SH_DEBUG enable debugging, or
# LOG4SH_TRACE to enable tracing. log4sh ERROR and above messages are always
# printed

LOG4SH_TRACE=${LOG4SH_TRACE:+' '}
LOG4SH_TRACE=${LOG4SH_TRACE:-':'}
${LOG4SH_TRACE} eval LOG4SH_DEBUG=1
${LOG4SH_TRACE} echo 'log4sh:TRACE output enabled' >&2

LOG4SH_DEBUG=${LOG4SH_DEBUG:+' '}
LOG4SH_DEBUG=${LOG4SH_DEBUG:-':'}
${LOG4SH_DEBUG} eval LOG4SH_INFO=1
${LOG4SH_DEBUG} echo 'log4sh:DEBUG output enabled' >&2

LOG4SH_INFO=${LOG4SH_INFO:+' '}
LOG4SH_INFO=${LOG4SH_INFO:-':'}
${LOG4SH_INFO} echo 'log4sh:INFO output enabled' >&2

LOG4SH_CONFIGURATION="${LOG4SH_CONFIGURATION:-log4sh.properties}"
LOG4SH_CONFIG_PREFIX="${LOG4SH_CONFIG_PREFIX:-log4sh}"

# internal variables

__log4sh_filename=`basename $0`
__log4sh_tmpDir=''
__log4sh_trapsFile=''

__log4shAppenders=''
__log4shAppenderCount=0
__log4shAppenderCounts=''
__log4shAppenderLayouts=''
__log4shAppenderLevels=''
__log4shAppenderPatterns=''
__log4shAppenderTypes=''
__log4shAppender_file_files=''
__log4shAppender_rollingFile_maxBackupIndexes=''
__log4shAppender_rollingFile_maxFileSizes=''
__log4shAppender_smtp_tos=''
__log4shAppender_smtp_subjects=''
__log4shAppender_syslog_facilities=''

__log4shThreadName=${__LOG4SH_THREAD_DEFAULT}
__log4shThreadStack=${__LOG4SH_THREAD_DEFAULT}

# missing bourne variables

[ -z "${SECONDS:-}" ] && SECONDS=''

#=============================================================================
# log4sh private functions
#

#-----------------------------------------------------------------------------
# miscellaneous
#

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>log4sh_cleanup</function></funcdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a cleanup function to remove the temporary directory used by
#   log4sh.  It is provided for scripts who want to do log4sh cleanup work
#   themselves rather than using the automated cleanup of log4sh that is
#   invoked upon a normal exit of the script.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>log4sh_cleanup</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
log4sh_cleanup()
{
  _log4sh_cleanup ${__LOG4SH_TRAP_EXIT}
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_cleanup</function></funcdef>
#       <paramdef>string <parameter>signal</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a cleanup function to remove the temporary directory used by
#   log4sh.  It should only be called by log4sh itself when it is taking
#   control of traps.</para>
#   <para>If there was a previously defined trap for the given signal, log4sh
#   will attempt to call the original trap handler as well so as not to break
#   the parent script.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_log4sh_cleanup EXIT</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_cleanup()
{
  _trap="${1}"

  ${LOG4SH_INFO} echo "log4sh:INFO _log4sh_cleanup(): the ${_trap} signal was caught" >&2

  _restoreTrap=${__LOG4SH_FALSE}
  _oldTrap=''

  # these are the only signals that log4sh traps.  no need to list them all
  case "${_trap}" in
    EXIT|${__LOG4SH_TRAP_EXIT}) _signal=0 ;;
    TERM) _signal=15 ;;
  esac

  # do we possibly need to restore a previous trap?
  if [ -f "${__log4sh_trapsFile}" -a -s "${__log4sh_trapsFile}" ]; then
    # yes.  figure out what we need to do
    if [ `grep "^trap -- " "${__log4sh_trapsFile}" >/dev/null; echo $?` -eq 0 ]
    then
      # newer trap command
      ${LOG4SH_DEBUG} echo 'log4sh:DEBUG newer POSIX trap command'
      _restoreTrap=${__LOG4SH_TRUE}
      _oldTrap=`grep "${_trap}$" "${__log4sh_trapsFile}" |\
        sed "s/^trap -- \(.*\) [A-Z]*$/\1/"`
    elif [ `grep "[0-9]*: " "${__log4sh_trapsFile}" >/dev/null; echo $?` -eq 0 ]
    then
      # older trap command
      ${LOG4SH_DEBUG} echo 'log4sh:DEBUG older style trap command'
      _restoreTrap=${__LOG4SH_TRUE}
      _oldTrap=`grep "^${_signal}: " "${__log4sh_trapsFile}" |\
        sed 's/^[0-9]*: //'`
    else
      # unrecognized trap output
      echo 'log4sh:ERROR unable to restore old traps! unrecognized trap command output' >&2
    fi
  fi

  # do our work
  rm -fr "${__log4sh_tmpDir}"

  # execute the old trap
  if [ ${_restoreTrap} -eq ${__LOG4SH_TRUE} -a -n "${_oldTrap}" ]; then
    eval "${_oldTrap}"
  fi

  # exit cleanly
  case ${_trap} in
    EXIT|${__LOG4SH_TRAP_EXIT})
      _return=${_signal}
      ;;
    *)
      _return=`expr 128 + ${_signal}`
      # disable the EXIT trap
      trap EXIT
      ;;
  esac

  # exit if the trap was not the special log4sh-EXIT trap
  [ "${_trap}" = ${__LOG4SH_TRAP_EXIT} ] || exit ${_return}

  unset _oldTrap _signal _restoreTrap _trap
  return ${_return}
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_mktempDir</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Creates a secure temporary directory within which temporary files can
#     be created.  Honors the TMPDIR environment variable if it is set.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>tmpDir=`_log4sh_mktempDir`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_mktempDir()
{
  # try the standard mktemp function
  ( exec mktemp -dqt log4sh.XXXXXX 2>/dev/null ) && return

  # the standard mktemp didn't work.  doing our own.
  if [ -n "${RANDOM:-}" ]; then
    # $RANDOM works
    _random=${RANDOM}${RANDOM}${RANDOM}$$
  else
    # $RANDOM doesn't work
    _date=`date '+%Y%m%d%H%M%S'`
    _random=`expr ${_date} / $$`
  fi

  _tmpDir="${TMPDIR-/tmp}/log4sh.${_random}"
  ( umask 077 && mkdir "${_tmpDir}" ) || {
    echo 'log4sh:FATAL could not create temporary directory! exiting' >&2
    exit 1
  }

  ${LOG4SH_DEBUG} echo "log4sh:DEBUG temporary directory (${_tmpDir})" >&2
  echo ${_tmpDir}
  unset _date _random _tmpDir
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_level2tag</function></funcdef>
#       <paramdef>integer <parameter>level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Converts an internally used level constant into its external tag
#   equivalent</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>tag=`_log4sh_level2tag 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
# TODO use arrays instead of case statement ??
_log4sh_level2tag()
{
  _level=$1

  _return=${__LOG4SH_TRUE}
  _tag=''

  case ${_level} in
    ${__LOG4SH_LEVEL_TRACE}) _tag=${__LOG4SH_LEVEL_TRACE_STR} ;;
    ${__LOG4SH_LEVEL_DEBUG}) _tag=${__LOG4SH_LEVEL_DEBUG_STR} ;;
    ${__LOG4SH_LEVEL_INFO}) _tag=${__LOG4SH_LEVEL_INFO_STR} ;;
    ${__LOG4SH_LEVEL_WARN}) _tag=${__LOG4SH_LEVEL_WARN_STR} ;;
    ${__LOG4SH_LEVEL_ERROR}) _tag=${__LOG4SH_LEVEL_ERROR_STR} ;;
    ${__LOG4SH_LEVEL_FATAL}) _tag=${__LOG4SH_LEVEL_FATAL_STR} ;;
    ${__LOG4SH_LEVEL_OFF}) _tag=${__LOG4SH_LEVEL_OFF_STR} ;;
    ${__LOG4SH_LEVEL_CLOSED}) _tag=${__LOG4SH_LEVEL_CLOSED_STR} ;;
    *) _return=${__LOG4SH_FALSE} ;;
  esac

  echo ${_tag}
  unset _level _tag
  return ${_return}
}

#/**
# <s:function group="miscellaneous">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_tag2level</function></funcdef>
#       <paramdef>string <parameter>tag</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Converts an externally used level tag into its internal constant
#   equivalent</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>level=`_log4sh_tag2level WARN`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_tag2level()
{
  _tag=$1

  _level=''
  _return=${__LOG4SH_TRUE}

  case $_tag in
    ${__LOG4SH_LEVEL_TRACE_STR}) _level=${__LOG4SH_LEVEL_TRACE} ;;
    ${__LOG4SH_LEVEL_DEBUG_STR}) _level=${__LOG4SH_LEVEL_DEBUG} ;;
    ${__LOG4SH_LEVEL_INFO_STR}) _level=${__LOG4SH_LEVEL_INFO} ;;
    ${__LOG4SH_LEVEL_WARN_STR}) _level=${__LOG4SH_LEVEL_WARN} ;;
    ${__LOG4SH_LEVEL_ERROR_STR}) _level=${__LOG4SH_LEVEL_ERROR} ;;
    ${__LOG4SH_LEVEL_FATAL_STR}) _level=${__LOG4SH_LEVEL_FATAL} ;;
    ${__LOG4SH_LEVEL_OFF_STR}) _level=${__LOG4SH_LEVEL_OFF} ;;
    ${__LOG4SH_LEVEL_CLOSED_STR}) _level=${__LOG4SH_LEVEL_CLOSED} ;;
    *) _return=${__LOG4SH_FALSE} ;;
  esac

  echo ${_level}
  unset _level _tag
  return ${_return}
}

#-----------------------------------------------------------------------------
# array handling
#
# note: arrays are '1' based
#

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_findArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Find the position of element in an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>
#       pos=`_log4sh_findArrayElement "$array" $element`
#     </funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_findArrayElement()
{
  __pos=`echo "$1" |awk '$0==e{print NR}' e="$2"`
  [ -n "${__pos}" ] && echo "${__pos}" || echo 0
  unset __pos
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>integer <parameter>position</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Retrieve the element at the given position from an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>element=`_log4sh_getArrayElement "$array" $position`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getArrayElement()
{
  _lgae_array="$1"
  _lgae_index=$2

  __oldIFS="${IFS}"; IFS="${__LOG4SH_ARRAY_IFS}"
  set -- junk ${_lgae_array}
  IFS="${__oldIFS}"; unset __oldIFS

  shift ${_lgae_index}
  echo $1

  unset _lgae_index __oldIFS
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>integer</code>
# </entry>
# <entry align="left">
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getArrayLength</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the length of an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>length=`_log4sh_getArrayLength "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getArrayLength()
{
  _oldIFS="${IFS}"; IFS="$__LOG4SH_ARRAY_IFS"
  set -- ${1}
  IFS="${_oldIFS}"; unset _oldIFS
  echo $#
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string[]</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_setArrayElement</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>integer <parameter>position</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Place an element at a given location in an array</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_setArrayElement "$array" $position $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_setArrayElement()
{
  echo "$1" |awk '{if(NR==r){print e}else{print $0}}' r=$2 e="$3"
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_peekStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Return the topmost element on a stack without removing the
#   element.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>element=`_log4sh_peekStack "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_peekStack()
{
  echo "$@" |awk '{line=$0}END{print line}'
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string[]</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_popStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Remove the top-most element from a stack.  This command takes a
#   normal log4sh string array as input, but treats it as though it were a
#   stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_popStack "$array"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_popStack()
{
  _array="$1"
  _length=`_log4sh_getArrayLength "$_array"`
  echo "$_array" |awk '{if(NR<r){print $0}}' r=$_length
  unset _array _length
}

#/**
# <s:function group="arrays">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_pushStack</function></funcdef>
#       <paramdef>string[] <parameter>array</parameter></paramdef>
#       <paramdef>string <parameter>element</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add a new element to the top of a stack.  This command takes a normal
#   log4sh string array as input, but treats it as though it were a
#   stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newArray=`_log4sh_pushStack "$array" $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_pushStack()
{
  echo "${1:+${1}${__LOG4SH_ARRAY_IFS}}${2}"
}

#-----------------------------------------------------------------------------
# Properties file functions
#

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_getPropPrefix</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Takes a string (eg. "log4sh.appender.stderr.File") and returns the
#   prefix of it (everything before the first '.' char).  Normally used in
#   parsing the log4sh configuration file.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>prefix=`_log4sh_getPropPrefix $property"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_getPropPrefix()
{
  _oldIFS="${IFS}"; IFS="."
  set -- ${1}
  IFS="${_oldIFS}"; unset _oldIFS
  echo ${1}
}

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_stripPropPrefix</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Strips the prefix off a property configuration command and returns
#   the string.  E.g. "log4sh.appender.stderr.File" becomes
#   "appender.stderr.File".</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>newProperty=`_log4sh_stripPropPrefix $property`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_stripPropPrefix()
{
  expr ${1} : '[^.]*\.\(.*\)'
}

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propAppender</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#       <paramdef>string <parameter>value</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Configures log4sh using an appender property configuration statement</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_log4sh_propAppender $property $value</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propAppender()
{
  _lpa_key=$1
  _lpa_value=$2

  _lpa_appender=''

  # strip the leading 'appender' keyword prefix
  _lpa_key=`_log4sh_stripPropPrefix $_lpa_key`

  # handle appender definitions
  if [ "${_lpa_key}" '=' "`expr \"${_lpa_key}\" : '\([^.]*\)'`" ]; then
    _lpa_appender="${_lpa_key}"
  else
    _lpa_appender=`_log4sh_getPropPrefix $_lpa_key`
  fi

  # does the appender exist?
  appender_exists ${_lpa_appender}
  if [ $? -eq ${__LOG4SH_FALSE} ]; then
    echo "log4sh:ERROR attempt to configure the non-existant appender (${_lpa_appender})" >&2
    unset _lpa_appender _lpa_key _lpa_value
    return ${__LOG4SH_ERROR}
  fi

  # handle the appender type
  if [ "${_lpa_appender}" = "${_lpa_key}" ]; then
    case $_lpa_value in
      $__LOG4SH_TYPE_CONSOLE)
        appender_setType $_lpa_appender $_lpa_value ;;
      $__LOG4SH_TYPE_FILE)
        appender_setType $_lpa_appender $_lpa_value ;;
      $__LOG4SH_TYPE_DAILY_ROLLING_FILE)
        appender_setType $_lpa_appender $_lpa_value ;;
      $__LOG4SH_TYPE_ROLLING_FILE)
        appender_setType $_lpa_appender $_lpa_value ;;
      $__LOG4SH_TYPE_SMTP)
        appender_setType $_lpa_appender $_lpa_value ;;
      $__LOG4SH_TYPE_SYSLOG)
        appender_setType $_lpa_appender $_lpa_value ;;
      *)
        echo "log4sh:ERROR appender type ($_lpa_value) unrecognized" >&2 ;;
    esac
    unset _lpa_appender _lpa_key _lpa_value
    return ${__LOG4SH_TRUE}
  fi

  # handle appender values and methods
  _lpa_key=`_log4sh_stripPropPrefix $_lpa_key`
  if [ "$_lpa_key" '=' "`expr \"${_lpa_key}\" : '\([^.]*\)'`" ]; then
    case $_lpa_key in
      # General
      Threshold) appender_setLevel $_lpa_appender "$_lpa_value" ;;
      layout) appender_setLayout $_lpa_appender "$_lpa_value" ;;

      # FileAppender
      DatePattern) ;;  # unsupported
      File)
        _lpa_value=`eval echo "${_lpa_value}"`
        appender_file_setFile $_lpa_appender "$_lpa_value"
        ;;
      MaxBackupIndex) appender_file_setMaxBackupIndex ;;
      MaxFileSize) appender_file_setMaxFileSize ;;

      # SMTPAppender
      To) appender_smtp_setTo $_lpa_appender "$_lpa_value" ;;
      Subject) appender_smtp_setSubject $_lpa_appender "$_lpa_value" ;;

      # SyslogAppender
      SyslogHost) appender_syslog_setHost ${_lpa_appender} "${_lpa_value}" ;;
      Facility) appender_syslog_setFacility ${_lpa_appender} "${_lpa_value}" ;;

      # catch unrecognized
      *) echo "log4sh:ERROR appender value/method ($_lpa_key) unrecognized" >&2 ;;
    esac
    unset _lpa_appender _lpa_key _lpa_value
    return ${__LOG4SH_TRUE}
  fi

  # handle appender layout values and methods
  _lpa_key=`_log4sh_stripPropPrefix $_lpa_key`
  case $_lpa_key in
    ConversionPattern) appender_setPattern $_lpa_appender "$_lpa_value" ;;
    *) echo "log4sh:ERROR layout value/method ($_lpa_key) unrecognized" >&2 ;;
  esac
  unset _lpa_appender _lpa_key _lpa_value
  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propLogger</function></funcdef>
#       <paramdef>string <parameter>property</parameter></paramdef>
#       <paramdef>string <parameter>value</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>(future) Configures log4sh with a <code>logger</code> configuration
#   statement.  Sample output: "logger: property value".</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>result=`_log4sh_propLogger $property $value`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propLogger()
{
  _prop=`_log4sh_stripPropPrefix $1`
  echo "logger: $_prop $2"
  unset _prop
}

#
# configure log4sh with a rootLogger configuration statement
#
# @param  _key    configuration command
# @param  _value  configuration value
#
#/**
# <s:function group="properties" isPrivate="true">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_log4sh_propRootLogger</function></funcdef>
#       <paramdef>string <parameter>rootLogger</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Configures log4sh with a <code>rootLogger</code> configuration
#   statement.  It expects a comma separated string similar to the following:</para>
#   <para><code>log4sh.rootLogger=ERROR, stderr, R</code></para>
#   <para>The first option is the default logging level to set for all
#   of the following appenders that will be created, and all following options
#   are the names of appenders to create.  The appender names must be
#   unique.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_log4sh_propRootLogger $value</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_log4sh_propRootLogger()
{
  __lprl_rootLogger=`echo "$@" |sed 's/ *, */,/g'`
  __lprl_count=`echo "${__lprl_rootLogger}" |sed 's/,/ /g' |wc -w`
  __lprl_index=1
  while [ ${__lprl_index} -le ${__lprl_count} ]; do
    __lprl_operand=`echo "${__lprl_rootLogger}" |cut -d, -f${__lprl_index}`
    if [ ${__lprl_index} -eq 1 ]; then
      logger_setLevel "${__lprl_operand}"
    else
      appender_exists "${__lprl_operand}"
      if [ $? -eq ${__LOG4SH_FALSE} ]; then
        logger_addAppender "${__lprl_operand}"
      else
        echo "log4sh:ERROR attempt to add already existing appender of name (${__lprl_operand})" >&2
      fi
    fi
    __lprl_index=`expr ${__lprl_index} + 1`
  done

  unset __lprl_count __lprl_index __lprl_operand __lprl_rootLogger
}

#/**
# <s:function group="properties">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>log4sh_readProperties</function></funcdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Reads a properties file and calls appropriate configuration
#   functions.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pos=`_log4sh_findArrayElement "$array" $element`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
log4sh_readProperties()
{
  _lrp_file=$1

  # strip the config prefix and dump output to a temporary file
  _lrp_tmpFile="${__log4sh_tmpDir}/properties"
  $LOG4SH_DEBUG echo "log4sh:DEBUG LOG4SH_CONFIG_PREFIX=${LOG4SH_CONFIG_PREFIX}"
  grep "^${LOG4SH_CONFIG_PREFIX}\." "${_lrp_file}" >"${_lrp_tmpFile}"

  # read the file in. using awk here instead of piping the file into 'while'
  # and then reading with 'read' as the pipe causes a fork under the Solaris
  # shell which makes it impossible to get the variables passed back to the
  # parent script.
  exec 3<&0 <"${_lrp_tmpFile}"
  while read _lrp_line; do
    _lrp_key=`expr "${_lrp_line}" : '\([^= ]*\) *=.*'`
    _lrp_value=`expr "${_lrp_line}" : '[^= ]* *= *\(.*\)'`

    # strip the leading 'log4sh.'
    _lrp_key=`_log4sh_stripPropPrefix ${_lrp_key}`
    _lrp_keyword=`_log4sh_getPropPrefix ${_lrp_key}`
    case ${_lrp_keyword} in
      appender) _log4sh_propAppender ${_lrp_key} "${_lrp_value}" ;;
      external) ;;
      logger) _log4sh_propLogger ${_lrp_key} "${_lrp_value}" ;;
      rootLogger) _log4sh_propRootLogger "${_lrp_value}" ;;
      *) echo "log4sh:ERROR unrecognized properties keyword (${_lrp_keyword})" >&2 ;;
    esac
  done
  exec 0<&3 3<&-

  # remove the temporary file
  rm -f "${_lrp_tmpFile}"

  unset _lrp_file _lrp_tmpFile _lrp_line _lrp_key _lrp_keyword _lrp_value
}

#=============================================================================
# Logger
#

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>/<code>boolean</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_addAppender</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add and initialize a new appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_addAppender $appender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_addAppender()
{
  laa_appender=$1

  # XXX should we be using setter functions here?? for performance, no.
  __log4shAppenders=`_log4sh_pushStack "${__log4shAppenders}" $1`
  __log4shAppenderCount=`expr ${__log4shAppenderCount} + 1`
  __log4shAppenderCounts="${__log4shAppenderCounts} ${__log4shAppenderCount}"
  __log4shAppenderLayouts=`_log4sh_pushStack \
    "$__log4shAppenderLayouts" "${__LOG4SH_LAYOUT_SIMPLE}"`
  __log4shAppenderLevels=`_log4sh_pushStack \
    "${__log4shAppenderLevels}" ${__LOG4SH_NULL}`
  __log4shAppenderPatterns=`_log4sh_pushStack \
    "${__log4shAppenderPatterns}" "${__LOG4SH_PATTERN_DEFAULT}"`
  __log4shAppenderTypes=`_log4sh_pushStack \
    "${__log4shAppenderTypes}" ${__LOG4SH_TYPE_CONSOLE}`
  __log4shAppender_file_files=`_log4sh_pushStack \
    "${__log4shAppender_file_files}" ${__LOG4SH_NULL}`
  __log4shAppender_rollingFile_maxBackupIndexes=`_log4sh_pushStack \
    "${__log4shAppender_rollingFile_maxBackupIndexes}" \
    ${__LOG4SH_TYPE_ROLLING_FILE_MAX_BACKUP_INDEX}`
  __log4shAppender_rollingFile_maxFileSizes=`_log4sh_pushStack \
    "${__log4shAppender_rollingFile_maxFileSizes}" \
    ${__LOG4SH_TYPE_ROLLING_FILE_MAX_FILE_SIZE}`
  __log4shAppender_smtp_tos=`_log4sh_pushStack \
    "${__log4shAppender_smtp_tos}" ${__LOG4SH_NULL}`
  __log4shAppender_smtp_subjects=`_log4sh_pushStack \
    "${__log4shAppender_smtp_subjects}" ${__LOG4SH_NULL}`
  __log4shAppender_syslog_facilities=`_log4sh_pushStack \
    "${__log4shAppender_syslog_facilities}" ${__LOG4SH_TYPE_SYSLOG_FACILITY}`

  _appender_cache "${laa_appender}"

  unset laa_appender

  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_addAppenderWithPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Add and initialize a new appender with a specific PatternLayout</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_addAppenderWithPattern $appender '%d %p - %m%n'</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_addAppenderWithPattern()
{
  _myAppender=$1
  _myPattern=$2

  logger_addAppender ${_myAppender}
  appender_setLayout ${_myAppender} "${__LOG4SH_LAYOUT_PATTERN}"
  appender_setPattern ${_myAppender} "${_myPattern}"

  unset _myAppender _myPattern
}

#/**
# <s:function group="PatternLayout">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setFilename</function></funcdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the filename to be shown when the '%F' conversion character is
#   used in a PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setFilename "myScript.sh"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setFilename()
{
  __log4sh_filename="$1"
}

#/**
# <s:function group="Levels">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_getLevel</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the global default logging level (e.g. DEBUG).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>level=`logger_getLevel`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_getLevel()
{
  _log4sh_level2tag ${__log4shLevel}
}

#/**
# <s:function group="Levels">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setLevel</function></funcdef>
#       <paramdef>string <parameter>level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the global default logging level (e.g. DEBUG).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setLevel INFO</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setLevel()
{
  _tag=$1

  _level=`_log4sh_tag2level ${_tag}`
  if [ $? -eq ${__LOG4SH_TRUE} ]; then
    __log4shLevel=${_level}
  else
    echo "log4sh:ERROR attempt to set invalid log level '${_tag}'" >&2
  fi

  unset _level _tag
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_getThreadName</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current thread name.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>threadName=`logger_getThreadName`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_getThreadName()
{
  echo ${__log4shThreadName}
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_setThreadName</function></funcdef>
#       <paramdef>string <parameter>threadName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the thread name (e.g. the name of the script).  This thread name
#   can be used with the '%t' conversion character within a
#   PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_setThreadName "myThread"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_setThreadName()
{
  _thread=$1

  _length=`_log4sh_getArrayLength "$__log4shThreadStack"`
  __log4shThreadStack=`_log4sh_setArrayElement "$__log4shThreadStack" $_length $_thread`
  __log4shThreadName=$_thread

  unset _index _thread
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_pushThreadName</function></funcdef>
#       <paramdef>string <parameter>threadName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the thread name (eg. the name of the script) and pushes the old
#   on to a stack for later use.  This thread name can be used with the '%t'
#   conversion character within a PatternLayout.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_pushThreadName "myThread"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_pushThreadName()
{
  __log4shThreadStack=`_log4sh_pushStack "$__log4shThreadStack" $1`
  __log4shThreadName=$1
}

#/**
# <s:function group="Threads">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_popThreadName</function></funcdef>
#       <void />
#     </funcprototype>
#   </funcsynopsis>
#   <para>Removes the topmost thread name from the stack.  The next thread name
#   on the stack is then placed in the __log4shThreadName variable.  If the
#   stack is empty, or has only one element left, then a warning is given that
#   no more thread names can be popped from the stack.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_popThreadName</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_popThreadName()
{
  _length=`_log4sh_getArrayLength "$__log4shThreadStack"`
  if [ $_length -gt 1 ]; then
    __log4shThreadStack=`_log4sh_popStack "$__log4shThreadStack"`
    __log4shThreadName=`_log4sh_peekStack "$__log4shThreadStack"`
  else
    echo 'log4sh:WARN no more thread names available on thread name stack.' >&2
  fi
}

#=============================================================================
# Appenders
#

#/**
# <!-- XXX should this function even exist ?? -->
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getNameByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the name of the appender at the given position in the appender
#   array.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appenderName=`_appender_getNameByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getNameByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $1
}

#/**
# <!-- TODO write this function ?? -->
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_setNameByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#       <paramdef>string <parameter>appenderName</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>(future) Sets the name of the appender at the given position in the
#   appender array.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_setNameByIndex 3 "myAppender"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_setNameByIndex()
{
  return $__LOG4SH_TRUE
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_parsePattern</function></funcdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#       <paramdef>string <parameter>priority</parameter></paramdef>
#       <paramdef>string <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Generate a logging message given a Pattern, priority, and message.
#   All dates will be represented as ISO 8601 dates (YYYY-MM-DD
#   HH:MM:SS).</para>
#   <para>Note: the '<code>%r</code>' character modifier does not work in the
#   Solaris <code>/bin/sh</code> shell</para>
#   <para>Example:
#     <blockquote>
#       <funcsynopsis>
#         <funcsynopsisinfo>_appender_parsePattern '%d %p - %m%n' INFO "message to log"</funcsynopsisinfo>
#       </funcsynopsis>
#     </blockquote>
#   </para>
# </entry>
# </s:function>
#*/
_appender_parsePattern()
{
  _pattern=$1
  _priority=$2
  _msg=$3

  _date=''
  _doEval=${__LOG4SH_FALSE}

  # determine if various commands must be run
  _oldIFS="${IFS}"; IFS='%'; set -- x${_pattern}; IFS="${_oldIFS}"
  if [ $# -gt 1 ]; then
    # run the date command??
    IFS='d'; set -- ${_pattern}x; IFS="${_oldIFS}"
    [ $# -gt 1 ] && _date=`date '+%Y-%m-%d %H:%M:%S'`

    # run the eval command?
    IFS='X'; set -- ${_pattern}x; IFS="${_oldIFS}"
    [ $# -gt 1 ] && _doEval=${__LOG4SH_TRUE}
  fi
  unset _oldIFS

  # escape any '\' and '&' chars in the message
  _msg=`echo "${_msg}" |sed 's/\\\\/\\\\\\\\/g;s/&/\\\\&/g'`

  # deal with any newlines in the message
  _msg=`echo "${_msg}" |tr '\n' ''`

  # parse the pattern
  _pattern=`echo "${_pattern}" |sed \
    -e 's/%c/shell/g' \
    -e 's/%d{[^}]*}/%d/g' -e "s/%d/${_date}/g" \
    -e "s/%F/${__log4sh_filename}/g" \
    -e 's/%L//g' \
    -e 's/%n//g' \
    -e "s/%-*[0-9]*p/${_priority}/g" \
    -e "s/%-*[0-9]*r/${SECONDS}/g" \
    -e "s/%t/${__log4shThreadName}/g" \
    -e 's/%x//g' \
    -e 's/%X{/$\{/g' \
    -e 's/%%m/%%%m/g' -e 's/%%/%/g' \
    -e "s%m${_msg}" |tr '' '\n'`
  if [ ${_doEval} -eq ${__LOG4SH_FALSE} ]; then
    echo "${_pattern}"
  else
    eval "echo \"${_pattern}\""
  fi

  unset _date _doEval _msg _pattern _tag
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getPatternByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Pattern of an Appender at the specified array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pattern=`_appender_getPatternByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getPatternByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Pattern of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>pattern=`appender_getPattern myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getPattern()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderPatterns" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>/<code>boolean</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setPattern</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>pattern</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Pattern of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setPattern myAppender '%d %p - %m%n'</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setPattern()
{
  asp_appender=$1
  asp_pattern=$2

  _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${asp_appender}`
  __log4shAppenderPatterns=`_log4sh_setArrayElement \
    "${__log4shAppenderPatterns}" ${_index} "${asp_pattern}"`

  # resource the appender
  _appender_cache ${asp_appender}

  unset asp_appender asp_pattern _index
  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getTypeByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Type of an Appender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getTypeByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getTypeByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderTypes" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Type of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getType myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getType()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderTypes" $_index
  unset $_index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getAppenderType</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Gets the Type of an Appender at the
#     given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getAppenderType 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getAppenderType()
{
  _appender_getTypeByIndex "$@"
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>/<code>boolean</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>type</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Type of an Appender (e.g. FileAppender)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setType myAppender FileAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setType()
{
  ast_appender="$1"
  ast_type="$2"

  # XXX need to verify types

  # XXX need to do any cleanup when changing a previously defined appender??
  _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${ast_appender}`
  __log4shAppenderTypes=`_log4sh_setArrayElement \
    "${__log4shAppenderTypes}" ${_index} "${ast_type}"`

  # resource the appender
  _appender_cache ${ast_appender}

  unset ast_appender ast_type _index
  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderType</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>type</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Sets the Type of an Appender (e.g.
#     FileAppender)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setAppenderType myAppender FileAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderType()
{
  appender_setType "$@"
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getLayoutByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Layout of an Appender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getLayoutByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getLayoutByIndex()
{
  _log4sh_getArrayElement "$__log4shAppenderLayouts" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getLayout</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the Layout of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getLayout myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getLayout()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderLayouts" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setLayout</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>layout</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Layout of an Appender (e.g. PatternLayout)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setLayout myAppender PatternLayout</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setLayout()
{
  asl_appender="$1"
  asl_layout="$2"

  case ${asl_layout} in
    ${__LOG4SH_LAYOUT_HTML}|\
    ${__LOG4SH_LAYOUT_SIMPLE}|\
    ${__LOG4SH_LAYOUT_PATTERN})
      :
      ;;
    *)
      echo "log4sh:ERROR unknown layout ${asl_layout}" >&2
      return ${__LOG4SH_FALSE}
      ;;
  esac

  _index=`_log4sh_findArrayElement "${__log4shAppenders}" $1`
  __log4shAppenderLayouts=`_log4sh_setArrayElement \
    "${__log4shAppenderLayouts}" ${_index} "${asl_layout}"`

  # resource the appender
  _appender_cache ${asl_appender}

  unset asl_appender asl_layout _index
  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_getLevelByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current logging Level of an Appender at the given array
#   index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`_appender_getLevelByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_getLevelByIndex()
{
  _log4sh_getArrayElement "${__log4shAppenderLevels}" $1
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_cache</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Dynamically creates an appender function in memory that will fully
#   instantiate itself when it is called.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_cache myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_cache()
{
  _ac_appender="$1"

  _ac_inc=${__log4sh_tmpDir}/${_ac_appender}${__LOG4SH_APPENDER_INCLUDE_EXT}

  cat >"${_ac_inc}" <<EOF
${__LOG4SH_APPENDER_FUNC_PREFIX}${_ac_appender}() {
  _la_level=\$1
  _la_message=\$2
  _appender_generate ${_ac_appender}
  ${__LOG4SH_APPENDER_FUNC_PREFIX}${_ac_appender} \${_la_level} "\${_la_message}"
}
EOF
  . "${_ac_inc}"
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_generate</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Dynamically regenerates an appender function in memory that is fully
#   instantiated for a specific logging task.</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_generate myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_generate()
{
  __ag_appender="$1"
  ${LOG4SH_TRACE} echo "log4sh:TRACE __ag_appender='${__ag_appender}'" >&2

  __index=`_log4sh_findArrayElement "${__log4shAppenders}" ${__ag_appender}`
  __inc=${__log4sh_tmpDir}/${__ag_appender}${__LOG4SH_APPENDER_INCLUDE_EXT}

  ### generate function for inclusion
  # TODO can we modularize this in the future?

  # send STDOUT to our include file
  exec 4>&1 >${__inc}

  # header
  echo "${__LOG4SH_APPENDER_FUNC_PREFIX}${__ag_appender}() {"
  echo "  _la_level=\$1"
  echo "  _la_message=\$2"

  # determine the 'layout'
  __layout=`_appender_getLayoutByIndex ${__index}`
  ${LOG4SH_TRACE} echo "log4sh:TRACE __layout='${__layout}'" >&2
  case ${__layout} in
    ${__LOG4SH_LAYOUT_SIMPLE}|\
    ${__LOG4SH_LAYOUT_HTML})
      ${LOG4SH_DEBUG} echo "log4sh:DEBUG using simple/html layout" >&2
      echo "  __layout=\"\${_la_level} - \${_la_message}\""
      ;;

    ${__LOG4SH_LAYOUT_PATTERN})
      ${LOG4SH_DEBUG} echo "log4sh:DEBUG using pattern layout" >&2
      __pattern=`_appender_getPatternByIndex ${__index}`
      echo "  __layout=\`_appender_parsePattern '${__pattern}' \${_la_level} \"\${_la_message}\"\`"
      ;;
  esac

  # what appender 'type' do we have? TODO check not missing
  __type=`_appender_getTypeByIndex ${__index}`
  ${LOG4SH_TRACE} echo "log4sh:TRACE __type='${__type}'" >&2
  case ${__type} in
    ${__LOG4SH_TYPE_CONSOLE})
      echo "  echo \"\${__layout}\""
      ;;

    ${__LOG4SH_TYPE_FILE}|\
    ${__LOG4SH_TYPE_ROLLING_FILE}|\
    ${__LOG4SH_TYPE_DAILY_ROLLING_FILE})
      __file=`_appender_file_getFileByIndex ${__index}`
      ${LOG4SH_TRACE} echo "log4sh:TRACE __file='${__file}'" >&2
      if [ "${__file}" = 'STDERR' ]; then
        echo "  echo \"\${__layout}\" >&2"
      elif [ "${__file}" != ${__LOG4SH_NULL} ]; then
        # do rotation
	case ${__type} in
	  ${__LOG4SH_TYPE_ROLLING_FILE})
	    # check whether the max file size has been exceeded
	    cat <<EOF
  __rotSize=${__LOG4SH_TYPE_ROLLING_FILE_MAX_FILE_SIZE}
  __size=\`ls -s '${__file}' |awk '{print \$1}'\`
  if [ \${__size} -gt \${__rotSize} ]; then
    # rotate the appender file(s)
    __rotIndex=${__LOG4SH_TYPE_ROLLING_FILE_MAX_BACKUP_INDEX}
    __rotFile="${__file}.\${__rotIndex}"
    [ -f "\${__rotFile}" ] && rm -f "\${__rotFile}"
    while [ \${__rotIndex} -gt 0 ]; do
      __rotIndexLast=\${__rotIndex}
      __rotFileLast="\${__rotFile}"
      __rotIndex=\`expr \${__rotIndex} - 1\`
      __rotFile="${__file}.\${__rotIndex}"
      [ -f "\${__rotFile}" ] && mv -f "\${__rotFile}" "\${__rotFileLast}"
    done
    unset __rotFile __rotFileLast __rotIndex __rotIndexLast
  fi
  unset __size
EOF
	    ;;
	  ${__LOG4SH_TYPE_DAILY_ROLLING_FILE})
	    ;;
	esac
	echo "  echo \"\${__layout}\" >>'${__file}'"
      else
	# the file "${__LOG4SH_NULL}" is closed?? Why did we get here, and why
	# did I care when I wrote this bit of code?
        :
      fi

      unset __file
      ;;

    ${__LOG4SH_TYPE_SMTP})
      cat <<EOF
  __smtpTo='`_appender_smtp_getToByIndex ${__index}`'
  __smtpSubject='`_appender_smtp_getSubjectByIndex ${__index}`'
  echo \"${__layout}\" |mail -s \"\${__smtpSubject}\" \${__smtpTo}
  unset __smtpTo __smtpSubject
EOF
      ;;

    ${__LOG4SH_TYPE_SYSLOG})
      cat <<EOF
  __facility='`_appender_syslog_getFacilityByIndex ${__index}`'
  __tag="\${_la_level}"
  case "\${__tag}" in
    ${__LOG4SH_LEVEL_FATAL_STR}) __tag='emerg' ;;
    ${__LOG4SH_LEVEL_TRACE_STR}) __tag='debug' ;;
  esac
  ( exec logger -p "\${__facility}.\${__tag}" -t "${__log4sh_filename}[$$]" "\${_la_layout}" 2>/dev/null )
  unset __facility __tag
EOF
      ;;

    *)
      echo "log4sh:ERROR unrecognized appender type (${__type})" >&2
      ;;
  esac

  # footer
  echo "}"

  # restore STDOUT
  exec 1>&4 4>&-

  # source the newly created function
  . "${__inc}"

  unset __ag_appender
  unset __inc __tmpl
  unset __layout __pattern __type
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>boolean</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_exists</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Checks for the existance of a named appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>exists=`appender_exists myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_exists()
{
  _index=`_log4sh_findArrayElement "${__log4shAppenders}" $1`
  [ "${_index}" -gt 0 ] && _return=${__LOG4SH_TRUE} || _return=${__LOG4SH_FALSE}
  unset _index
  return ${_return}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getLevel</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Gets the current logging Level of an Appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>type=`appender_getLevel myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getLevel()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppenderLevels" $_index
  unset _index
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>/<code>boolean</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setLevel</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>level</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the Level of an Appender (e.g. INFO)</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setLevel myAppender INFO</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setLevel()
{
  asl_appender=$1
  asl_level=$2

  _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${asl_appender}`
  __log4shAppenderLevels=`_log4sh_setArrayElement \
    "${__log4shAppenderLevels}" ${_index} "${asl_level}"`

  # resource the appender
  _appender_cache ${asl_appender}

  unset asl_appender asl_type _index
  return ${__LOG4SH_TRUE}
}

#/**
# <s:function group="Appenders">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_close</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Disable any further logging via an appender.  Once closed, the
#   appender can be reopened by setting it to any logging Level (e.g.
#   INFO).</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_close myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_close()
{
  appender_setLevel $1 ${__LOG4SH_LEVEL_CLOSED_STR}
}

#-----------------------------------------------------------------------------
# FileAppender
#

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_file_getFileByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the filename of a FileAppender at the given array index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>_appender_file_getFileByIndex 3</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_file_getFileByIndex()
{
  _log4sh_getArrayElement "${__log4shAppender_file_files}" $1
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_file_getFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the filename of a FileAppender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_file_getFile myAppender</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_file_getFile()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_file_files" $_index
  unset _index
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_file_setFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the filename for a FileAppender (e.g. "STDERR" or
#   "/var/log/log4sh.log")</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_file_setFile myAppender STDERR</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_file_setFile()
{
  afsf_appender=$1
  afsf_file=$2
  ${LOG4SH_TRACE} echo "log4sh:TRACE afsf_appender='${afsf_appender}' afsf_file='${afsf_file}'" >&2

  if [ -n "${afsf_appender}" -a -n "${afsf_file}" ]; then
    # set the file
    _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${afsf_appender}`
    __log4shAppender_file_files=`_log4sh_setArrayElement \
      "${__log4shAppender_file_files}" ${_index} "${afsf_file}"`
    _return=$?

    # create the file (if it isn't already)
    if [ ${_return} -eq ${__LOG4SH_TRUE} \
      -a ! "${afsf_file}" '=' ${__LOG4SH_NULL} \
      -a ! "${afsf_file}" '=' 'STDERR' \
      -a ! -f "${afsf_file}" \
    ]; then
      touch "${afsf_file}" 2>/dev/null
      _result=$?
      # determine success of touch command
      if [ ${_result} -eq 1 ]; then
        echo 'log4sh:ERROR appender_file_setFile(): could not create file; closing appender' >&2
        appender_setLevel ${afsf_appender} ${__LOG4SH_LEVEL_CLOSED_STR}
      fi
      unset _result
    fi
  else
    echo 'log4sh:ERROR appender_file_setFile(): missing appender and/or file' >&2
    _return=${__LOG4SH_FALSE}
  fi

  # resource the appender
  _appender_cache ${afsf_appender}

  unset afsf_appender afsf_file _index
  return ${_return}
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderFile</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>filename</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Set the filename for a FileAppender
#     (e.g. "STDERR" or "/var/log/log4sh.log")</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setAppenderFile myAppender STDERR</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderFile()
{
  appender_file_setFile "$@"
}

# XXX this function needs to be implemented
appender_file_setMaxBackupIndex()
{
  :
}

# XXX this function needs to be implemented
appender_file_setMaxFileSize()
{
  return ${__LOG4SH_FALSE}

  # split the file size into parts
  _l4s_size=`expr ${APP_MAX_FILE_SIZE} : '\([0-9]*\)'`
  _l4s_unit=`expr ${APP_MAX_FILE_SIZE} : '[0-9]*\([A-Za-z]\{2,3\}\)'`

  # determine multiplier and file size
  case "${_l4s_unit}" in
    B) _l4s_mul=1 ;;
    KB|KiB) _l4s_mul=1024 ;;
    MB|MiB) _l4s_mul=1048576 ;;
    GB|GiB) _l4s_mul=1073741824 ;;
    TB|TiB) _l4s_mul=1099511627776 ;;
    *)
      echo "log4sh:ERROR unrecognized file size unit '${_l4s_unit}'" >&2
      return ${__LOG4SH_FALSE}
      ;;
  esac
  _l4s_maxFileSize=`expr ${_l4s_size} \* ${_l4s_mul}`

  unset _l4s_size _l4s_unit _l4s_mul _l4s_maxFileSize
}

#-----------------------------------------------------------------------------
# SMTPAppender
#

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_smtp_getToByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the email to address for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>email=`_appender_smtp_getToByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_smtp_getToByIndex()
{
  _log4sh_getArrayElement "$__log4shAppender_smtp_tos" $1
}

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_smtp_getTo</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the to address for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>email=`appender_smtp_getTo myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_smtp_getTo()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_smtp_tos" $_index
  unset _index
}

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_smtp_setTo</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>email</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the to address for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_smtp_setTo()
{
  asst_appender=$1
  asst_email=$2

  _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${asst_appender}`
  __log4shAppender_smtp_tos=`_log4sh_setArrayElement \
    "${__log4shAppender_smtp_tos}" ${_index} "${asst_email}"`

  # resource the appender
  _appender_cache ${asst_appender}

  unset asst_appender asst_email _index
}

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <emphasis>void</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderRecipient</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>email</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis>Set the to address for the given
#     appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderRecipient()
{
  appender_smtp_setTo "$@"
}

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>_appender_smtp_getSubjectByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the email subject for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>subject=`_appender_smtp_getSubjectByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_smtp_getSubjectByIndex()
{
  _log4sh_getArrayElement "$__log4shAppender_smtp_subjects" $1
}

#/**
# <s:function group="SMTPAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_smtp_getSubject</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the email subject for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>subject=`appender_smtp_getSubject myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_smtp_getSubject()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_smtp_subjects" $_index
  unset _index
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void/boolean</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_smtp_setSubject</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>subject</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Sets the email subject for an SMTP appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_smtp_setSubject myAppender "This is a test"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_smtp_setSubject()
{
  asss_appender=$1
  asss_subject=$2

  # set the Subject
  _index=`_log4sh_findArrayElement "${__log4shAppenders}" ${asss_appender}`
  if [ ${_index} -gt 0 ]; then
    __log4shAppender_smtp_subjects=`_log4sh_setArrayElement \
      "${__log4shAppender_smtp_subjects}" ${_index} "${asss_subject}"`
    _return=${__LOG4SH_TRUE}
  else
    echo "log4sh:ERROR could not set Subject for appender (${asss_appender})" >&2
    _return=${__LOG4SH_FALSE}
  fi

  # resource the appender
  _appender_cache ${asss_appender}

  unset asss_appender asss_subject _index
  return ${_return}
}

#/**
# <s:function group="FileAppender">
# <entry align="right">
#   <emphasis>void/boolean</emphasis>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setAppenderSubject</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>subject</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Sets the email subject for an SMTP
#     appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setAppenderSubject myAppender "This is a test"</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setAppenderSubject()
{
  appender_smtp_setSubject "$@"
}

#-----------------------------------------------------------------------------
# SyslogAppender
#

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef>
#         <function>_appender_syslog_getFacilityByIndex</function>
#       </funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the syslog facility of the specified appender by index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>
#       facility=`_appender_syslog_getFacilityByIndex 3`
#     </funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
_appender_syslog_getFacilityByIndex()
{
  _log4sh_getArrayElement "$__log4shAppender_syslog_facilities" $1
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_getFacilityByIndex</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Get the syslog facility of the
#     specified appender by index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>facility=`appender_syslog_getFacilityByIndex 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_getFacilityByIndex()
{
  _appender_syslog_getFacilityByIndex "$@"
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_getSyslogFacility</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Get the syslog facility of the
#     specified appender by index</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>facility=`appender_getSyslogFacility 3`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_getSyslogFacility()
{
  _appender_syslog_getFacilityByIndex "$@"
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_getFacility</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Get the syslog facility for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>facility=`appender_syslog_getFacility myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_getFacility()
{
  _index=`_log4sh_findArrayElement "$__log4shAppenders" $1`
  _log4sh_getArrayElement "$__log4shAppender_syslog_facilities" $_index
  unset _index
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_getFacility</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Get the syslog facility for the
#     given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>facility=`appender_syslog_getFacilityByName myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_getFacilityByName()
{
  appender_syslog_getFacility "$@"
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_setFacility</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>facility</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>Set the syslog facility for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_syslog_setFacility myAppender local4`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_setFacility()
{
  assf_appender=$1
  assf_facility=$2

  if [ $# -ne 2 ]; then
    echo 'log4sh:ERROR appender_syslog_setFacility(): missing attributes' >&2
    return ${__LOG4SH_FALSE}
  fi

  # check for valid facility
  echo ${__LOG4SH_TYPE_SYSLOG_FACILITIES} |grep " ${assf_facility} " >/dev/null
  if [ $? -ne 0 ]; then
    # the facility is not valid
    echo "log4sh:ERROR [${assf_facility}] is an unknown syslog facility.  Defaulting to [USER]." >&2
    assf_facility='user'
  fi

  # set appender facility
  assf_index=`_log4sh_findArrayElement "${__log4shAppenders}" ${assf_appender}`
  # TODO: put check for valid _index here
  __log4shAppender_syslog_facilities=`_log4sh_setArrayElement \
    "${__log4shAppender_syslog_facilities}" ${assf_index} "${assf_facility}"`

  # resource the appender
  _appender_cache ${assf_appender}

  unset assf_appender assf_facility assf_index
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_setSyslogFacility</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>facility</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para><emphasis>(deprecated)</emphasis> Set the syslog facility for the
#     given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_setSyslogFacility myAppender local4`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_setSyslogFacility()
{
  appender_syslog_setFacility "$@"
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>string</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_getHost</function></funcdef>
#       <paramdef>integer <parameter>index</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>TODO: Get the syslog host of the specified appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>host=`appender_syslog_getHost myAppender`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_getHost()
{
  return $__LOG4SH_TRUE
}

#/**
# <s:function group="SyslogAppender">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>appender_syslog_setHost</function></funcdef>
#       <paramdef>string <parameter>appender</parameter></paramdef>
#       <paramdef>string <parameter>host</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>TODO: Set the syslog host for the given appender</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>appender_syslog_setHost myAppender localhost`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
appender_syslog_setHost()
{
  return ${__LOG4SH_TRUE}
}

#=============================================================================
# Log
#

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>log</function></funcdef>
#       <paramdef>string <parameter>level</parameter></paramdef>
#       <paramdef>string[] <parameter>message(s)</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>The base logging command that logs a message to all defined
#     appenders</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>log DEBUG "This is a test message"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
log()
{
  _tag=$1
  shift
  [ $# -ne 0 ] && _msg="$@" || _msg=`cat`

  _thisLevel=`_log4sh_tag2level ${_tag}`

  _l_IFS="${IFS}"
  IFS="${__LOG4SH_DEFAULT_IFS}" && \
  for _appenderIndex in ${__log4shAppenderCounts}; do
    # determine appender level
    _appenderLevelTag=`_appender_getLevelByIndex ${_appenderIndex}`
    if [ "${_appenderLevelTag}" = ${__LOG4SH_NULL} ]; then
      # continue if requested is level less than general level
      [ ! ${__log4shLevel} -le ${_thisLevel} ] && continue
    else
      _appenderLevel=`_log4sh_tag2level ${_appenderLevelTag}`
      # continue if requested level is less than specific appender level
      [ ! ${_appenderLevel} -le ${_thisLevel} ] && continue
    fi

    # execute dynamic appender function
    _appenderName=`_log4sh_getArrayElement \
      "${__log4shAppenders}" ${_appenderIndex}`
    ${__LOG4SH_APPENDER_FUNC_PREFIX}${_appenderName} ${_tag} "${_msg}"

  done
  IFS="${_l_IFS}"

  unset _msg _l_IFS _tag _thisLayout _thisLevel
  unset _appenderFile _appenderIndex _appenderLayout _appenderLevel
  unset _appenderLevelTag _appenderName _appenderPattern _appenderType
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_trace</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the TRACE
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_trace "This is a trace message"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_trace()
{
  log ${__LOG4SH_LEVEL_TRACE_STR} "$@"
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_debug</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the DEBUG
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_debug "This is a debug message"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_debug()
{
  log ${__LOG4SH_LEVEL_DEBUG_STR} "$@"
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_info</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the INFO
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_info "This is a info message"`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_info()
{
  log ${__LOG4SH_LEVEL_INFO_STR} "$@"
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_warn</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the WARN
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>
#       logger_warn "This is a warn message"`
#     </funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_warn()
{
  log ${__LOG4SH_LEVEL_WARN_STR} "$@"
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_error</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the ERROR
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>
#       logger_error "This is a error message"`
#     </funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_error()
{
  log ${__LOG4SH_LEVEL_ERROR_STR} "$@"
}

#/**
# <s:function group="Logger">
# <entry align="right">
#   <code>void</code>
# </entry>
# <entry>
#   <funcsynopsis>
#     <funcprototype>
#       <funcdef><function>logger_fatal</function></funcdef>
#       <paramdef>string[] <parameter>message</parameter></paramdef>
#     </funcprototype>
#   </funcsynopsis>
#   <para>This is a helper function for logging a message at the FATAL
#     priority</para>
#   <funcsynopsis>
#     <funcsynopsisinfo>logger_fatal This is a fatal message`</funcsynopsisinfo>
#   </funcsynopsis>
# </entry>
# </s:function>
#*/
logger_fatal()
{
  log ${__LOG4SH_LEVEL_FATAL_STR} "$@"
}

#
# main
#

# create a temporary directory
__log4sh_tmpDir=`_log4sh_mktempDir`

# preserve old trap(s)
__log4sh_trapsFile="${__log4sh_tmpDir}/traps"
trap >"${__log4sh_trapsFile}"

# configure traps
trap '_log4sh_cleanup EXIT' EXIT
trap '_log4sh_cleanup TERM' TERM

# load the properties file
${LOG4SH_DEBUG} \
  echo "log4sh:DEBUG LOG4SH_CONFIGURATION=${LOG4SH_CONFIGURATION}" >&2
if [ "${LOG4SH_CONFIGURATION}" != 'none' -a -r "${LOG4SH_CONFIGURATION}" ]
then
  ${LOG4SH_INFO} echo "log4sh:INFO configuring via properties file" >&2
  log4sh_readProperties "${LOG4SH_CONFIGURATION}"
else
  if [ "${LOG4SH_CONFIGURATION}" != 'none' ]; then
    echo 'log4sh:WARN No appenders could be found.' >&2
    echo 'log4sh:WARN Please initalize the log4sh system properly.' >&2
  fi
  ${LOG4SH_INFO} echo "log4sh:INFO configuring at runtime" >&2

  # note: not using the constant variables here (e.g. for ConsoleAppender) so
  # that those perusing the code can have a working example
  logger_setLevel ${__LOG4SH_LEVEL_ERROR_STR}
  logger_addAppender stdout
  appender_setType stdout ConsoleAppender ${__LOG4SH_FALSE}
  appender_setLayout stdout PatternLayout ${__LOG4SH_FALSE}
  appender_setPattern stdout '%-4r [%t] %-5p %c %x - %m%n'
fi

# restore the previous set of shell flags
for _log4sh_shellFlag in ${__LOG4SH_SHELL_FLAGS}; do
  echo ${__log4sh_oldShellFlags} |grep ${_log4sh_shellFlag} >/dev/null \
    || set +${_log4sh_shellFlag}
done
unset _log4sh_shellFlag

#/**
# </s:shelldoc>
#*/
