Changes with 1.3.4

[kwd] added a log4sh_cleanup() function that scripts can call.  normally log4sh
will be cleaned up using a trap handler, but if an external script overrides
the trap handler, it won't work.  this gives scripts the ability to manually
invoke the cleanup.

[kwd] fixed bug that caused '&' characters in the logging message to be
replaced with '%m'.

[kwd] updated comments in the examples to match what the examples are actually
showing.  (thanks to Stephan Hegel for pointing out the mismatch)

[kwd] fixed bug that caused only the first conversion character in a
PatternLayout to be replaced.  (credits to Aaron Rodden for the patch)

[kwd] worked on the PatternLayout 'd' conversion character .  it now supports
giving a date specifier (e.g. %d{ISODATE}), but whatever is specified is
ignored.  it was done to better support log4j properties files that are
converted.

[kwd] the '%' PatternLayout conversion character is now supported.  when two
'%%' chars are given in a pattern, they are replaced with a single '%' char in
the output.

[kwd} added support for the %X PatternLayout conversion character.  (credits to
Aaron Rodden for the patch)


Changes with 1.3.3

[kwd] improved the _log4sh_mktempDir function some more.  the random temporary
directories generated under the standard Solaris shell were not all that random
(as pointed out by Gordon Pedersen).  the function now supports the system
mktemp function (if it exists), but falls back to the shell $RANDOM value (if
it works), and finally it will do a mix of the date divided by the current
process id.  this should make the semi-random value suffiently difficult enough
to easily guess.  

[kwd] replacing some more sed commands with expr equivalents

[kwd] fixed a situation where changing the default value of the IFS variable
once log4sh was loaded would cause log4sh to have problems with for loops

[kwd] added trap code to automatically remove the temporary directory upon exit
of the script.  did this so that if the outside script is killled, the
temporary directory is still cleaned up.

[kwd] with the addition of a trap handler, the log4sh handler overwrites any
previously defined handler.  added code to execute the previous handler as well
so that log4sh plays nicely with scripts that trap the EXIT or TERM signals as
well.

[kwd] added the ability to debug log4sh itself by declaring a LOG4SH_DEBUG
variable

[kwd] found a major oops bug when configuring log4sh using a properties file.
If there were more than two appenders declared with the log4sh.rootLogger
option, or if they were not separated with exactily ', ' (comma space), they
were [mostly] ignored.  basically, it didn't work right.  brown bag here!
(thanks to Gordon Pedersen for indirectly finding this one)

[kwd] added appender_exists function to check for the existance of an appender.
some things were being done with the assumption that the appender existed, but
it was never checked.  starting to check now.

[kwd] applied a user supplied patch that allows the SyslogAppender to use the
different facilities and levels, and to write the name of the script and pid as
well to make the syslog output more standard.  (credits to Aaron Rodden)

[kwd] after looking through some log4j code, I realized that if an invalid
Syslog facility is given, log4j defaults to the 'user' facility.  log4sh does
now too.

[kwd] spaced now before and after the '=' char in the log4sh.properties file
(e.g. "log4sh.appender.F = FileAppender")


Changes with 1.3.2

[kwd] removed the last reminants of the old array implementation that was used
for the __log4shAppenders variable.  the new implementation is now used
consistently throughout.

[kwd] fixed bug in the popThreadName function.  the current thread name was
being filled with the wrong value.

[kwd] added the (deprecated) commands appender_setAppenderFile() and
appender_setSyslogFacility() back to be backwards compatible with the 1.2
series

[kwd] increased performance in the log() function (credits to Omner Calhoun)

[kwd] fixed bug in the log4sh_readProperties() function that broke it under
Solaris (credits to Steve Etchelecu)

[kwd] begin putting function documentation in the log4sh code as pseudo-XML
like data.  next, I wrote an extractor to parse out the XML into a separate
file.  that file gets run through an XSLT, and is now inserted as function
documentation into the docbook documentation during build time.

[kwd] docbook source now split into individual chapter files to support the
dynamic inclusion of the function reference chapter

[kwd] finished the shelldoc documentation

[kwd] read through the documentation and made some updates

[kwd] replaced depraced function calls in the test programs with the current
versions


Changes with 1.3.1

[kwd] added a __LOG4SH_VERSION variable

[kwd] implemented a more secure method for using temporary files.  if the
TMPDIR variable is set, it is honored.  the method is based on info from
http://www.linuxsecurity.com/content/view/115462/151/.

[kwd] prefixed all the new array functions with _log4sh.  didn't think about it
for the last release.  oops.

[kwd] replaced many 'awk' statements with 'cut' statements.  resulted in about
10% faster performance while testing with the test-log4sh unit test script.

[kwd] added a TRACE debug level.  log4j-1.2.12 added this, so I did too.
actually, just renamed my ALL debug level to TRACE, so nothing *really*
changed.

[kwd] renamed the file, smtp, and syslog functions to make future fuction
additions easier

[kwd] reordered and regrouped the functions according to what they are for

[kwd] stripped the setting and unsetting of temporary variables from many
functions where they are simple enough to be understand without them

[kwd] abstracted several array gets into functions to allow for future
underlying array implementation changes

[kwd] replaced nearly all usages of the old array system with the new system

[kwd] fixed *many* reported bugs (credits to Omner Calhoun)

[kwd] the various logging commands now support multiple arguments (very much
like the echo command).  as a result, the input no longer needs to be
surrounded by quotes.  (credits to Omner Calhoun)

[kwd] realized that while internally, practically all of the get* functions use
index numbers, there is the need to use the appender name as well.  added a
appender_syslog_getFacilityByName function (as an example) and renamed the old
function to appender_syslog_getFacilityByIndex.  must continue this work in the
future.

[kwd] begin implementing a type of documentation in the code...  will extract
the documentation at build time from the code which will be used to build API
documentation.  wrote a extractDocs.pl script to do the documentation
extraction.  it's written in perl, I know, but log4sh is still in shell!

[kwd] changed the functionality of the code in several places so that internal
shell commands are used instead of forking off an external command.  (credits
to Omner Calhoun)

[kwd] I'm sure there are others that were forgotten


Changes with 1.3.0

[kwd] implemented a Syslog appender for logging via syslog by using the logger
command.  currently limited to the localhost

[kwd] ported the new {get|push|pop}ThreadName functions from 1.2.7

[kwd] implemented a SMTP appender.  the appender is still in development.
(credits to Mickael Canevet)

[kwd] implemented a new way to handle the string arrays.  the old method worked
just fine, except for when the data contained space characters.  this new
method handles spaces as well (which are needed for the SMTP appender
subjects).
